generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model centers {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  location String @db.VarChar(255)
  phone    String @unique(map: "phone") @db.VarChar(255)
}

model homeworks {
  id          Int      @id @default(autoincrement())
  session_id  Int
  description String   @db.VarChar(255)
  due_date    DateTime @db.DateTime(0)

  @@index([session_id], map: "session_id")
}

model parents {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  phone    String  @unique(map: "phone") @db.VarChar(255)
  email    String? @unique(map: "email") @db.VarChar(255)
  password String  @db.VarChar(255)
}

model quizzes {
  id         Int      @id @default(autoincrement())
  session_id Int
  max_score  Int
  date       DateTime @db.DateTime(0)

  @@index([session_id], map: "session_id")
}

model sessions {
  id         Int              @id @default(autoincrement())
  teacher_id Int?
  date       DateTime         @db.DateTime(0)
  topic      String           @db.VarChar(255)
  center_id  Int?
  section    sessions_section

  @@index([center_id], map: "center_id")
  @@index([teacher_id], map: "teacher_id")
}

model student_homeworks {
  id              Int      @id @default(autoincrement())
  homework_id     Int
  student_id      Int
  status          String   @db.VarChar(255)
  submission_date DateTime @db.DateTime(0)

  @@index([homework_id], map: "homework_id")
  @@index([student_id], map: "student_id")
}

model student_parents {
  id           Int                          @id @default(autoincrement())
  student_id   Int
  parent_id    Int
  relationship student_parents_relationship

  @@unique([student_id, parent_id], map: "student_id")
  @@index([parent_id], map: "parent_id")
}

model student_quizzes {
  id         Int @id @default(autoincrement())
  quiz_id    Int
  student_id Int
  score      Int

  @@index([quiz_id], map: "quiz_id")
  @@index([student_id], map: "student_id")
}

model student_sessions {
  id                Int                                 @id @default(autoincrement())
  session_id        Int
  student_id        Int
  notes             String?                             @db.VarChar(255)
  attendance_status student_sessions_attendance_status? @default(absent)

  @@index([session_id], map: "session_id")
  @@index([student_id], map: "student_id")
}

model student_trials {
  id         Int    @id @default(autoincrement())
  trial_id   Int
  student_id Int
  result     String @db.VarChar(255)

  @@index([student_id], map: "student_id")
  @@index([trial_id], map: "trial_id")
}

model students {
  id        Int              @id @default(autoincrement())
  name      String           @db.VarChar(255)
  email     String?          @unique(map: "email") @db.VarChar(255)
  section   students_section
  center_id Int?
  phone     String           @unique(map: "phone") @db.VarChar(255)
  password  String           @db.VarChar(255)

  @@index([center_id], map: "center_id")
}

model teacher_centers {
  id         Int @id @default(autoincrement())
  teacher_id Int
  center_id  Int

  @@index([center_id], map: "center_id")
  @@index([teacher_id], map: "teacher_id")
}

model teachers {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  email    String @unique(map: "email") @db.VarChar(255)
  phone    String @unique(map: "phone") @db.VarChar(255)
  password String @db.VarChar(255)
}

model trials {
  id          Int            @id @default(autoincrement())
  description String         @db.VarChar(255)
  date        DateTime       @db.DateTime(0)
  max_score   Int
  section     trials_section
  teacher_id  Int?
  center_id   Int?

  @@index([center_id], map: "center_id")
  @@index([teacher_id], map: "teacher_id")
}

enum student_parents_relationship {
  father
  mother
  guardian
}

enum students_section {
  first_sec
  second_sec_scientific
  second_sec_literary
  third_sec
}

enum student_sessions_attendance_status {
  present
  absent
}

enum trials_section {
  first_sec
  second_sec_scientific
  second_sec_literary
  third_sec
}

enum sessions_section {
  first_sec
  second_sec_scientific
  second_sec_literary
  third_sec
}
